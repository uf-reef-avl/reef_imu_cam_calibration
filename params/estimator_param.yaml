  camera_imu_calibration: {
    xHat0: [0.5, 0.5, -0.5, 0.5,
            0, 0 ,2,
            0, 0, 0,
            0, 0, 0,
            0, 0, 0,
            0.0, -0.10, 0.,
            0.5, 0.5, 0.5, 0.5],

    #  P0: [0.02, 0.02, 0.02, #Attitude
    #       0.05, 0.05, 0.05,    #Position
    #       0.1, 0.1, 0.1, #Velocity
    #       0.01, 0.01, 0.01,  #Bias Gyro
    #       0.005, 0.005, 0.005,  #Bias Accel
    #       0.05, 0.05, 0.05,     #Arm
    #       0.02, 0.02, 0.02],  #Offset Attitude`

    P0: [0.002, 0.002, 0.002, #Attitude
         0.0025, 0.0025, 0.0025,    #Position
         0.000000001, 0.000000001, 0.000000001, #Velocity
         0.0001, 0.0001, 0.0001,  #Bias Gyro
         0.0001, 0.0001, 0.0001,  #Bias Accel
         0.0025, 0.0025, 0.0025,     #Arm
         0.002, 0.002, 0.002],  #Offset Attitude

    #From Datasheet: Continuous time parameters
    # Gyro power spectral density = 0.005 deg/s/sqrt(Hz) = 0.000087267 rad/s/sqrt(Hz) [(1 sigma)] => (1 sigma^2) = 0.000000008
    #Accel power spectral density = 400 microG/sqrt(Hz) = 0.0004 m/s^2-sqrt(Hz) [(1 sigma)] => (1 sigma^2) = 0.00000016
    #http://www.invensense.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf

    #     GYRO                                 ACCEL                                        gYRO BIAS WALK                          ACCEL BIAS WALK
    #  Q: [0.000000008,0.000000008,0.000000008,       0.00000016, 0.00000016,  0.00000016,               0.0000000008, 0.0000000008, 0.0000000008,         0.0000001,       0.0,      0.0],
    #  Q: [0.0000050,0.0000050,0.0000050,       0.001, 0.001,  0.001,               0.0, 0., 0.,          0.0000000000,       0.0000000000,      0.00000000],  #  Pixel noise STANDARD DEVIATION
    #  Q: [0.00050,0.00050,0.00050,       0.000005, 0.000005,  0.000005,               0.0, 0., 0.,          0.0000000000,       0.0000000000,      0.00000000],  #  Pixel noise STANDARD DEVIATION


    #    VectorNav
    #Noise density
    #    Gyro  = 0.0035 deg/s/sqrt(Hz) => 1 sigma = 0.000061085 rad/s/sqrt(Hz) ==>>> 1 sigma^2 = 0.000000004
    #    Gyro Walk =
    #    Accel =  0.14  milig/sqrt(Hz) =>0.00014*9.81(m/s^2)/sqrt(Hz) => 1 sigma = 0.0013734 ==>>> 1 sigma^2 = 0.00000188238
    #    Accel Walk =
    #With walks
#    Q: [ 0.0000373,  0.0000373,   0.0000373,         0.000188238,  0.000188238,   0.000188238,            0.0000001, 0.0000001 , 0.0000001 ,         0.000007683,       0.000007683,      0.000007683 ],  #  Pixel noise STANDARD DEVIATION
    Q: [  0.0000421,  0.0000716,   0.0000421,        0.000208143,  0.000174955,   0.00040006,           0.00000000000471340551867748, 0.0000000000358665842057054 , 0.0000000000049137633992722 ,         0.00000001901670263995,      0.000000039446296376,      0.0000000652130102858175],  #  Pixel noise STANDARD DEVIATION

    R_std: [ 3.5 ],

    beta: [ 0.95, 0.95, 0.95, #attitude
            0.95, 0.95, 0.95 , #position
            0.95, 0.95, 0.95,     #velocity
            0.1, 0.1, 0.1, #gyro bias
            0.1, 0.5, 0.1, #accel bias
            0.015, 0.015, 0.015, #pc_i
            0.25,0.25,0.25 ] #attitude offset


      #
#              beta: [1, 1, 1, #attitude
#                     1, 1, 1 , #position
#                     1, 1, 1,         #velocity
#                     1, 1, 1, #gyro bias
#                     1, 1, 1, #accel bias
#                     1, 1, 1, #pc_i
#                   1, 1, 1] #attitude offset


  }

